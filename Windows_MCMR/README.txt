/* Sanjit Singh Batra: 23-04-2015: MCM Regression Tool */

/* Documentation for the MCMR Tool */

/***DESCRIPTION***/
This tool performs regression using Minimum Complexity Machines(MCM). MCM Regression was introduced in [1] by Dr.Jayadeva(www.jayadeva.net) at the Department of Electrical Engineering, at I.I.T. Delhi.


/***HOW TO INSTALL***/

/**Linux**/

Simply run 'make' inside the folder. Restart your terminal or simply run 'source ~/.bashrc' in your current terminal.

To clean the folder of the compiled executables, simply run 'make clean'.


/***USAGE***/
On the command line, type,

>>mcmrtrain xor.train -Kernel 1 -C 10 -Gamma 0.01 -Epsilon 0.1

and the program will read the training data and output the model file `xor.model'. 

If you have a test set called xor.test, then type,

>>mcmrpredict xor.test xor.model

to perform prediction. The `xor.output' file contains the Mean Squared Error and the predicted labels.

Please look at the FAQs section for details on parameters and data formats.


/***FAQs***/

Q1) What should be the input format for training?
Ans 1) 
Consider the example of a simple XOR dataset, the file xor.train should be in the following format:
-1,0,0
1,0,1
1,1,0
-1,1,1

Here, the first column corresponds to the labels of the training data. The rest of the columns contain the features of the data. 
Note that, the labels could be any real values.


Q2) What are the different parameters involved in training? Is there a method to decide the values of these parameters? 

Ans 2) 
For the current version of this tool, there are only three parameters that are involved.
1) Kernel: 
This parameter can take the following values: 
0 - Linear kernel (u*v')
1 - RBF kernel (exp(-Gamma*(||u-v||^2)))

The default value for this flag is 1, it is specified as: 
>> mcmrtrain xor.train -Kernel 0 (for the Linear Kernel)
or
>> mcmrtrain xor.train -Kernel 1(for the RBF Kernel)

We suggest, that unless you have a particular requirement to use the Linear kernel, please use the RBF kernel.

2) C: 
This parameter can take any positive value. The default value is 1.

It is specified as:

>>mcmrtrain xor.train -Kernel 0 -C 50
The above command will train with the Linear Kernel and a C value of 10.23. Note that, if the -C flag is specified, it must be specified AFTER the kernel flag(the order is important).

We suggest that you try out the following different values of C: 0.001, 1 and 1000. 
In general, we do not know of a fixed method to determine the best value of this parameter, but we have observed, that one of the above three values generally gives good results.
In case the above method doesn't work or you would like to do a thorough grid search, we would suggest trying out only the powers of 10, i.e. 10^i, where i varies from -7 to +7.

3) Gamma:
This parameter is relevant only if the Kernel parameter is set to 1, i.e. we are using the RBF kernel. It controls the variance of the exponential function used in the RBF kernel.
The RBF kernel is given by: (exp(-Gamma*(||u-v||^2)))

The default value is 1/Number of features.

It is specified as: 

>>mcmtrain xor.train -Kernel 1 -C 100 -Gamma 0.1 -Epsilon 0.1

The above command will train with the RBF Kernel, a C value of 100 and a Gamma value of 0.01. Note that, if the -C flag is specified, it must be specified AFTER the kernel flag(the order is important).

We would suggest that one of the following values of Gamma generally gives good results: {0.001,0.005,0.01,0.05,0.1,0.5,1,5,10}.

4) Epsilon:

This corresponds to the tolerance of the regressor. The lower the value, the more the regressor will try to 	overfit.

The default value is 0.01.


Q3) How do I perform training, once I have a training file such as xor.train?

Ans 3) 
To perform training using the MCM Tool, we run the following command on the command line:
>>mcmrtrain xor.train -Kernel 1 -C 0.001 -Gamma 0.01

This will create the xor.model file, after training using the RBF kernel with C value = 0.001 and Gamma = 0.01.

Q4) Is it necessary to specify the parameters?

Ans 4)
It is not necessary to specify all parameters, their default values are:
Kernel -> 1
C -> 1
Gamma -> 1/Dimension
Epsilon -> 0.01

Please note that, if the flags are specified, they must be specified in order, i.e. if the C flag is specified, so must the kernel flag, and before the C flag.

Q5) What is the model file, xor.model? What is its format?

Ans5) 
The model file is used when we perform prediction. How it is used, is addressed in the next question. 

The model file has the following format (We display the model file generated by the training performed above, i.e. xor.model):
Line 1: MCM Binary Classification
Line 2: Kernel RBF(exp(-Gamma*(||u-v||^2)))
Line 3: C 0.001
Line 4: Gamma 0.01
Line 5: epsilon 0.1
Line 6: H 1
Line 7: Bias 0
Line 8: P 0.7
Line 9: 0.5,0.5
Line 10: 0.57735,0.57735
Line 11: nSV 4
Line 12: SV
Line 13: -1144.81,-0.866025,-0.866025
Line 14: 1144.81,-0.866025,0.866025
Line 15: 1144.81,0.866025,-0.866025
Line 16: -1144.81,0.866025,0.866025

We describe what each line means:-
Line 1: describes the task being performed, which is binary classification.
Line 2: indicates the kernel that is used for training.
Line 3: indicates the value of the parameter C.
Line 4: indicates the value of the parameter Gamma.
Line 5: indicates the value of the parameter epsilon.
Line 6: indicates the value of H, obtained after training.(Please refer to [1], for a description of this variable.)
Line 7: indicates the value of bias, obtained after training.(Please refer to [1], for a description of this variable.)
Line 8: indicates the value of P or eta, obtained after training.(Please refer to [1], for a description of this variable.)
Line 9: lists the feature-wise Mean values of the training data, for all dimensions.
Line 10: lists the feature-wise Standard Deviation of the training data, for all dimensions.
Line 11: indicates the number of support vectors in the trained minimum complexity machine.
Line 12: indicates that the following lines contain the Support Vectors that are chosen, i.e. those data points, for which lambda is non-zero.
Line 13 ... till EOF: Following this line, each line represents a support vector. The first column in each line is the lambda value corresponding to the support vector described. 
The rest of the columns are the feature values for the sample corresponding to that support vector.


Q6) For prediction, what should be the input format of my test data?

Ans 6) After training, for instance, using xor.train, you will obtain xor.model. The test data, xor.test in this case, should be in the following format:

-1,0.1,0.1
1,0.1,0.9
1,0.9,0.1
-1,0.9,0.9

Please note that the first column contains the labels of the test data, and the following columns contain the value of the features of the test data.
Note that, in case you do not know the actual labels for the test data, the first column should not be left blank, but instead can be filled with any of +1 or -1(A simple procedure would be to have all first columns equal to 1, in such a case). To emphasize, it is NECESSARY to specify the labels for the test data, even if you do not have their knowledge.


Q7) How do I perform prediction?

Ans 7) 
To perform prediction, we enter the following command on the command line:

>>mcmrpredict xor.test xor.model

This will output the MSE, the Pearson correlation of the predicted labels with the test labels, the Fisher Z-score and the predicted labels in xor.output. 
Note that, in case you are not aware of the actual test labels, you should ignore the statistics and simply obtain the predicted labels.


Q8) I am getting the error: 

"fatal error: zlib.h: No such file or directory
compilation terminated."

What should I do?

Ans 8) You most likely need to install the zlib libraries, which may not be pre-installed on your linux machine. Type this into your terminal:

sudo apt-get install zlib1g-dev

Then re-run make and it should install without errors.


Q9) The mcmrtrain(or mcmrpredict) keeps running for a long time without completing. Why is this happening even on a small dataset?

Ans 9) The most likely reason is that the data is not in the correct format. Please refer to Answer 6, for a sample data format, to be used for both, training as well as test data.


/***CONTACT***/
For any queries or suggestions, or reporting bugs, kindly email the authors at:
sanjitsbatra@gmail.com, with the subject: "MCMR Tool Feedback"


/***AUTHORS***/
Sanjit Singh Batra 
sanjitsbatra@gmail.com

/***Acknowledgements***/
This work has been completed under the guidance of Dr.Jayadeva at the Department of Electrical Engineering, Indian Institute of Technology, Delhi.
(www.jayadeva.net)

/***REFERENCES***/
[1]: Learning a hyperplane regressor by minimizing an exact bound on the VC dimension (http://arxiv.org/abs/1410.4573)
Jayadeva, Suresh Chandra, Siddarth Sabharwal, Sanjit S. Batra

[2]: Jayadeva, Learning a hyperplane classifier by minimizing an exact bound on the VC dimension, Neurocomputing, Available online 12 August 2014, ISSN 0925-2312, http://dx.doi.org/10.1016/j.neucom.2014.07.062.
(http://www.sciencedirect.com/science/article/pii/S0925231214010194)

[3]: Roland Wunderling,
Paralleler und Objektorientierter Simplex-Algorithmus,
ZIB technical report TR 96-09, Berlin 1996.
http://soplex.zib.de/

